library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity INSTRUCTION is
		port (clk, read, write, rst : in std_logic;
				addr : in std_logic_vector(7 downto 0);
				data_in : in std_logic_vector(15 downto 0);
				data_out : out std_logic_vector(15 downto 0));
end INSTRUCTION;

architecture RTL of INSTRUCTION is
  type ram_type is array (50 downto 0) of std_logic_vector (15 downto 0); 
    signal RAM : ram_type ;--:= (--1@@@@@@@ 1@@@@@@@  1@@@@@@@ 1@@@@@@@
                               --"00000000000000000000001000000000",
                              --1@@@@@@@ 1@@@@@@@  1@@@@@@@ 1@@@@@@@
                               --"00000101000000000000001000000011", --Rset [1-3]
                               --"00000100000000000000001000000000", --Nany
                               --1@@@@@@@ 1@@@@@@@  1@@@@@@@ 1@@@@@@@ 
                               --"00000011000000000000001000000100", --Obyte '4'
                               --"10000010000000010000001000000011", --Set_or [23]
                              --1@@@@@@@ 1@@@@@@@  1@@@@@@@ 1@@@@@@@
                               --"00000010000000100000000100000111", --Set [1-7]
                               --"00000001000000000000000100000001",
                               --(others => (others => '0'))); --Byte '1'
                               
    --signal ADDR_REG : std_logic_vector(31 downto 0) ; 
begin

--math.nez
--RAM(0) <= "00000001" & "00000000" & "00000000" & "00000010";
--RAM(1) <= "00000111" & "00000000" & "00000000" & "00000101";
--RAM(2) <= "00000111" & "00000000" & "00000000" & "00000100";
--RAM(3) <= "00000111" & "00000000" & "00000000" & "00001000";
--RAM(4) <= "00000001" & "00000000" & "00000000" & "00000100";
--RAM(5) <= "00000001" & "00000000" & "00000000" & "00000010";
--RAM(6) <= "00000110" & "00000000" & "00000000" & "00000000";
--RAM(7) <= "00000000" & "00000000" & "00000000" & "00000000";
--RAM(8) <= "00000001" & "00000000" & "00000000" & "00001000";
--RAM(9) <= "00000001" & "00000000" & "00000000" & "00001000";
--RAM(10) <= "00000010" & "00000000" & "00000000" & "00000001";

        RAM(0) <= "00000" & "00000000000";
        RAM(1) <= "00101" & "00000000011";
        RAM(2) <= "01110" & "00000001010";
        RAM(3) <= "00111" & "00000001001";
        RAM(4) <= "00010" & "00000000000";
        RAM(5) <= "00101" & "00000000111";
        RAM(6) <= "01110" & "00000001010";
        RAM(7) <= "01101" & "00000000000";
        RAM(8) <= "01110" & "00000000100";
        RAM(9) <= "00110" & "00000000000";
        RAM(10) <= "00101" & "00000001100";
        RAM(11) <= "01110" & "00000010011";
        RAM(12) <= "00111" & "00000010010";
        RAM(13) <= "00010" & "00000000001";
        RAM(14) <= "00101" & "00000010000";
        RAM(15) <= "01110" & "00000010011";
        RAM(16) <= "01101" & "00000000000";
        RAM(17) <= "01110" & "00000001101";
        RAM(18) <= "00110" & "00000000000";
        RAM(19) <= "01010" & "00000000000";
        RAM(20) <= "01011" & "00000000000";
        --RAM(17) <= "00000001" & "00000000" & "00000000" & "00101000";
        RAM(21) <= "00001" & "00000001110";
        RAM(22) <= "00101" & "00000010110";
        RAM(23) <= "01110" & "00000001010";
        RAM(24) <= "00111" & "00000011110";
        RAM(25) <= "00010" & "00000000000";
        RAM(26) <= "00101" & "00000011100";
        RAM(27) <= "01110" & "00000011100";
        RAM(28) <= "01101" & "00000000000";
        RAM(29) <= "01110" & "00000011001";
        --RAM(23) <= "00000001" & "00000000" & "00000000" & "00101001";
        RAM(30) <= "00001" & "00000001111";
        RAM(31) <= "00110" & "00000000000";
        RAM(32) <= "00010" & "00000000010";
        RAM(33) <= "00100" & "00000000010";
        RAM(34) <= "01110" & "00000011111";         	
	
	--process(read, write, rst)
	--begin
		--if(read = '1') then
			--data <= RAM(CONV_INTEGER(addr));
		--elsif(write = '1') then
			--RAM(CONV_INTEGER(addr)) <= data;
		--elsif(rst = '1') then


		--else
			--data <= (others => '0');
		--end if;
	--end process;
	
	process(CLK) begin
    if (CLK'event and CLK = '1') then
      --if (write = '1') then 
      --RAM(CONV_INTEGER(addr)) <= data_in;
      if (read = '1') then 
        data_out <= RAM(CONV_INTEGER(addr));
      end if; 
      --ADDR_REG <= ADDR_IN; 
    end if; 
  end process;
	
end RTL;